# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: pytests_docker_build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  IMAGE_NAME: jaihind213/radio-duck

permissions:
  contents: read
  pull-requests: write

jobs:
  build:

    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade poetry
        poetry install
        poetry export --without-hashes --with dev --format=requirements.txt > requirements.txt 
        pip install -r requirements.txt
    - name: Lint code check
      run: |
        if  isort . |grep Fixing;then 
            echo "please run 'isort .' and commit"; 
            unknown_command_to_fail_build;
        fi
        if  black . --preview |grep reformatted;then 
            echo "please run 'black . --preview' and commit"; 
            unknown_command_to_fail_build;
        fi
        echo "if flake8 detects something, please run 'flake8 --format=pylint .' and commit"
    - name: Test with pytest
      run: |
        pytest
    - name: Set up QEMU for cross-building
      uses: docker/setup-qemu-action@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Docker build image
      run: |
        DOCKER_VERSION=`cat pyproject.toml |grep version |grep -v python|grep -v target | awk '{print $3}' |sed -e "s/\"//g"`        
        IMAGE_TAG=${IMAGE_NAME}:${DOCKER_VERSION}
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
        echo "IMAGE_TAG is $IMAGE_TAG"
        
        docker buildx build --platform=linux/x86_64,linux/amd64 -t $IMAGE_TAG -t $IMAGE_NAME:latest .
        docker buildx build --output type=docker -t $IMAGE_TAG -t $IMAGE_NAME:latest .
        #why we issue build twice ?-> bug-> https://github.com/docker/buildx/issues/59, one is build and one is to load to local registry
        # todo: linux/arm64 takes a long time
    - name: Docker Scout
      id: docker-scout
      if: ${{ github.event_name == 'pull_request' }}
      uses: docker/scout-action@v1
      with:
        command: cves
        image: local://jaihind213/radio-duck
        ignore-unchanged: true
        only-severities: critical,high
        dockerhub-password: ${{ secrets.DHUB }}
        dockerhub-user: ${{ secrets.DHUB_USER }}
        exit-code: true
        only-fixed: true
        summary: true
      env:
        GITHUB_TOKEN: ${{ secrets.GTOKEN }}
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DHUB_USER }}
        password: ${{ secrets.DHUB }}
    - name: Build and push Docker image
      if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event_name == 'workflow_dispatch'
      uses: docker/build-push-action@v2
      with:
        context: .
        platforms: linux/x86_64,linux/amd64 # todo: linux/arm64 takes a long time
        push: true
        tags: ${{ env.IMAGE_NAME }}:latest,${{ env.IMAGE_TAG }}
    - name: Docker Hub Description
      if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event_name == 'workflow_dispatch'
      uses: peter-evans/dockerhub-description@v3
      with:
        username: ${{ secrets.DHUB_USER }}
        password: ${{ secrets.DHUB }}
        repository: jaihind213/radio-duck
        short-description: Radio Duck server - connect to duckdb over http. https://github.com/jaihind213/radio-duck
